export const SearchModule = {
    searchIndex: null,
    searchInput: null,
    searchButton: null,
    contentArea: null,
    searchHandler: null,
    keyPressHandler: null,
    isInitialized: false,

    async init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchModule –Ω–∞—á–∞—Ç–∞');
        
        this.searchInput = document.getElementById('docs-search');
        this.searchButton = document.getElementById('search-button');
        
        if (!this.searchInput || !this.searchButton) {
            console.warn('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞');
            return;
        }

        if (this.searchHandler) {
            this.searchButton.removeEventListener('click', this.searchHandler);
        }
        if (this.keyPressHandler) {
            this.searchInput.removeEventListener('keypress', this.keyPressHandler);
        }

        this.addEventListeners();
        
        if (!this.searchIndex) {
            await this.loadSearchIndex();
        }

        this.isInitialized = true;
        console.log('SearchModule —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },

    addEventListeners() {
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        if (this.searchHandler) {
            console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–∞');
            this.searchButton.removeEventListener('click', this.searchHandler);
        }
        if (this.keyPressHandler) {
            console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã');
            this.searchInput.removeEventListener('keypress', this.keyPressHandler);
        }

        this.searchHandler = (e) => {
            e.preventDefault();
            console.log('–ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–∏—Å–∫–∞');
            this.performSearch();
        };
        
        this.keyPressHandler = (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                console.log('–ù–∞–∂–∞—Ç Enter –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞');
                this.performSearch();
            }
        };

        this.searchButton.addEventListener('click', this.searchHandler);
        this.searchInput.addEventListener('keypress', this.keyPressHandler);
        console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    },

    async performSearch() {
        console.log('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫');
        const query = this.searchInput.value.trim();
        
        if (query.length < 2) {
            alert('–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞');
            return;
        }

        try {
            const results = await this.searchInContent(query);
            console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', results);
            this.displayResults(results, query);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞:', error);
            alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
        }
    },

    async loadSearchIndex() {
        try {
            const response = await fetch('/api/search-index.php');
            console.log('–û—Ç–≤–µ—Ç –æ—Ç API:', response);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const text = await response.text();
            console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', text);
            
            try {
                const data = JSON.parse(text);
                
                if (data.error) {
                    console.error('–û—à–∏–±–∫–∞ API:', data.error);
                    console.log('–ü—É—Ç—å –∫ docs:', data.path);
                    console.log('Document root:', data.root);
                    throw new Error(data.error);
                }
                
                this.searchIndex = data;
                console.log('–ò–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω:', this.searchIndex);
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e);
                throw e;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–∏—Å–∫–∞:', error);
            this.searchIndex = [];
        }
    },

    searchInContent(query) {
        console.log('–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É:', query);
        console.log('–¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å:', this.searchIndex);
        
        if (!this.searchIndex || !Array.isArray(this.searchIndex)) {
            console.warn('–ò–Ω–¥–µ–∫—Å –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
            return [];
        }

        const results = this.searchIndex.filter(item => {
            if (!item || typeof item.title !== 'string' || typeof item.content !== 'string') {
                console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∏–Ω–¥–µ–∫—Å–µ:', item);
                return false;
            }
            
            const titleMatch = item.title.toLowerCase().includes(query.toLowerCase());
            const contentMatch = item.content.toLowerCase().includes(query.toLowerCase());
            return titleMatch || contentMatch;
        });

        console.log('–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
        return results;
    },

    displayResults(results, query) {
        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞');
        
        let contentArea = document.querySelector('.documentation-content');
        if (!contentArea) {
            contentArea = document.querySelector('.content-docs');
            if (!contentArea) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
                return;
            }
        }

        if (results.length === 0) {
            contentArea.innerHTML = `
                <div class="search-results-container">
                    <div class="search-header">
                        <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                        <button class="reset-search-button">
                            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                        </button>
                    </div>
                    <div class="no-results-container">
                        <div class="no-results-icon">üîç</div>
                        <h3 class="no-results-title">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                        <p class="no-results-message">–ü–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                        <p class="no-results-suggestion">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</p>
                    </div>
                </div>
            `;

            const resetButton = contentArea.querySelector('.reset-search-button');
            resetButton.addEventListener('click', (e) => {
                e.preventDefault();
                window.location.reload();
            });
            return;
        }

        // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        const resultsHTML = results.map(result => {
            const section = this.determineSection(result.content, result.path);
            const highlightedContent = this.highlightText(result.content, query);
            
            return `
                <div class="search-result-item" data-url="${result.path}">
                    <div class="search-result-header">
                        <h3 class="search-result-title">${section || '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'}</h3>
                    </div>
                    <div class="search-result-preview">${highlightedContent}</div>
                </div>
            `;
        }).join('');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        contentArea.innerHTML = `
            <div class="search-results-container">
                <div class="search-header">
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h2>
                    <button class="reset-search-button">
                        –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
                    </button>
                </div>
                <p class="search-results-count">–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${results.length}</p>
                <div class="search-results">
                    ${resultsHTML}
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        const resetButton = contentArea.querySelector('.reset-search-button');
        resetButton.addEventListener('click', (e) => {
            e.preventDefault();
            window.location.reload();
        });

        this.addResultHandlers();
    },

    determineSection(content, path) {
        const normalizedPath = path.toLowerCase();

        if (normalizedPath.includes('navigationsystems')) {
            if (normalizedPath.includes('infrared.php')) {
                return '–°–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –ò–Ω—Ñ—Ä–∞–∫—Ä–∞—Å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã';
            }
            if (normalizedPath.includes('optical.php')) {
                return '–°–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –û–ø—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã';
            }
            if (normalizedPath.includes('ultrasonic.php')) {
                return '–°–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ - –£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã';
            }
            return '–°–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏';
        }

        if (normalizedPath.includes('payload')) {
            if (normalizedPath.includes('option-board.php')) {
                return '–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –ü–ª–∞—Ç–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è';
            }
            if (normalizedPath.includes('sensors.php')) {
                return '–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –°–µ–Ω—Å–æ—Ä—ã';
            }
            if (normalizedPath.includes('cameras.php')) {
                return '–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ - –ö–∞–º–µ—Ä—ã';
            }
            return '–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞';
        }

        if (path.match(/fpv|FPV/)) {
            if (path.match(/drone1\.php/i)) return 'FPV –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω1';
            if (path.match(/drone2\.php/i)) return 'FPV –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω2';
            if (path.match(/drone3\.php/i)) return 'FPV –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω3';
            return 'FPV –¥—Ä–æ–Ω—ã';
        }

        if (path.match(/training|Training/)) {
            if (path.match(/drone1\.php/i)) return '–£—á–µ–±–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω1';
            if (path.match(/drone2\.php/i)) return '–£—á–µ–±–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω2';
            if (path.match(/drone3\.php/i)) return '–£—á–µ–±–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω3';
            return '–£—á–µ–±–Ω—ã–µ –¥—Ä–æ–Ω—ã';
        }

        if (path.match(/agricultural|Agricultural/)) {
            if (path.match(/drone1\.php/i)) return '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω1';
            if (path.match(/drone2\.php/i)) return '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω2';
            if (path.match(/drone3\.php/i)) return '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω3';
            return '–°–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥—Ä–æ–Ω—ã';
        }

        if (path.match(/cargo|Cargo/)) {
            if (path.match(/drone1\.php/i)) return '–ì—É–∑–æ–≤—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω1';
            if (path.match(/drone2\.php/i)) return '–ì—Ä—É–∑–æ–≤—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω2';
            if (path.match(/drone3\.php/i)) return '–ì—Ä—É–∑–æ–≤—ã–µ –¥—Ä–æ–Ω—ã - –î—Ä–æ–Ω3';
            return '–ì—Ä—É–∑–æ–≤—ã–µ –¥—Ä–æ–Ω—ã';
        }

        if (content.includes('Python') || path.match(/python|Python/)) {
            return '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - Python';
        }
        if (content.includes('Lua') || content.includes('LUA') || path.match(/lua|Lua/)) {
            return '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - LUA';
        }
        if (content.includes('TRIK Studio') || path.match(/trik|TRIK/)) {
            return '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ - TRIK Studio';
        }
        if (content.includes('–Ω–∞–≤–∏–≥–∞—Ü–∏') || path.match(/navigation|Navigation/)) {
            return '–°–∏—Å—Ç–µ–º—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏';
        }
        if (path.match(/coptra-drone-sim\.php/i) || content.includes('–ö–æ–ø—Ç—Ä–∞ –°–∏–º')) {
            return '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ - –ö–æ–ø—Ç—Ä–∞ –°–∏–º';
        }
        if (path.match(/coptra-station\.php/i) || content.includes('–ö–æ–ø—Ç—Ä–∞ Station')) {
            return '–ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ - –ö–æ–ø—Ç—Ä–∞ Station';
        }
        if (content.includes('–ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞') || path.match(/payload|Payload/)) {
            return '–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞';
        }
        if (content.includes('–ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è') || path.match(/remotecontroller|RemoteController/i)) {
            return '–ü—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è';
        }
        if (path.includes('documentation.php') || content.includes('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')) {
            return '–í–≤–µ–¥–µ–Ω–∏–µ';
        }
        
        const pathParts = path.toLowerCase().split('/');
        if (path.match(/additionalmaterials|additionalmaterials/i)) {
            if (path.match(/database\.php/i)) {
                return '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π';
            }
            if (path.match(/downloads\.php/i)) {
                return '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ó–∞–≥—Ä—É–∑–∫–∏';
            }
            if (path.match(/methods-and-cases\.php/i)) {
                return '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –ú–µ—Ç–æ–¥–∏–∫–∏ –∏ –∫–µ–π—Å—ã';
            }
            return '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã';
        }
        return null;
    },

    highlightText(text, query) {
        // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const isMobile = window.innerWidth <= 768;
        const maxLength = isMobile ? 200 : 300;
        const contextLength = isMobile ? 50 : 100;
        
        const lowerText = text.toLowerCase();
        const lowerQuery = query.toLowerCase();
        const index = lowerText.indexOf(lowerQuery);
        
        if (index === -1) return text.slice(0, maxLength) + '...';
        
        let start = Math.max(0, index - contextLength);
        let end = Math.min(text.length, index + query.length + contextLength);
        let excerpt = text.slice(start, end);
        
        if (start > 0) excerpt = '...' + excerpt;
        if (end < text.length) excerpt += '...';
        
        return excerpt.replace(new RegExp(query, 'gi'), match => `<span class="search-highlight">${match}</span>`);
    },

    addResultHandlers() {
        const resultItems = document.querySelectorAll('.search-result-item');
        resultItems.forEach(item => {
            item.addEventListener('click', () => {
                const url = item.dataset.url;
                if (!url) {
                    console.warn('URL –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
                    return;
                }

                console.log('–ò—Å—Ö–æ–¥–Ω—ã–π URL:', url);
                
                // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ /docs/ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                const cleanPath = url.replace(/\/docs\/docs\//, '/docs/');
                console.log('–û—á–∏—â–µ–Ω–Ω—ã–π –ø—É—Ç—å:', cleanPath);
                
                // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤ —Å–∞–π–¥–±–∞—Ä–µ
                const sidebarLinks = document.querySelectorAll('.sidebar a[data-ajax-load]');
                const matchingLink = Array.from(sidebarLinks)
                    .find(link => {
                        const href = link.getAttribute('href');
                        return href && href.includes(cleanPath);
                    });

                if (matchingLink) {
                    console.log('–ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Å—Å—ã–ª–∫–∞ –≤ –º–µ–Ω—é:', matchingLink);
                    matchingLink.click();
                } else {
                    console.log('–ü—Ä—è–º–æ–π –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–º—É –ø—É—Ç–∏');
                    const baseUrl = window.location.origin;
                    const fullUrl = baseUrl + cleanPath;
                    console.log('–ü–æ–ª–Ω—ã–π URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞:', fullUrl);
                    window.location.href = fullUrl;
                }
            });
        });
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded: –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SearchModule');
    SearchModule.init();
});

// MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ DOM
const observer = new MutationObserver((mutations) => {
    for (const mutation of mutations) {
        if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
            const searchInput = document.getElementById('docs-search');
            const searchButton = document.getElementById('search-button');
            if (searchInput && searchButton) {
                console.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–∏—Å–∫–∞, –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
                SearchModule.init();
                break;
            }
        }
    }
});

observer.observe(document.body, {
    childList: true,
    subtree: true
}); 